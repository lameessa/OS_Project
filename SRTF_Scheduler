import java.util.*;

class Process {
    int id, arrivalTime, burstTime, remainingTime, completionTime, turnaroundTime, waitingTime;

    public Process(int id, int arrivalTime, int burstTime) {
        this.id = id;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.remainingTime = burstTime;
    }
}

public class SRTF_Scheduler {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // إدخال عدد العمليات
        System.out.print("Enter number of processes: ");
        int n = scanner.nextInt();

        List<Process> processes = new ArrayList<>();
        
        // إدخال بيانات العمليات
        for (int i = 0; i < n; i++) {
            System.out.print("Enter arrival time and burst time for P" + (i + 1) + ": ");
            int arrival = scanner.nextInt();
            int burst = scanner.nextInt();
            processes.add(new Process(i + 1, arrival, burst));
        }
        
        // تنفيذ الجدولة
        scheduleProcesses(processes);
        
        scanner.close();
    }

    public static void scheduleProcesses(List<Process> processes) {
        int n = processes.size();
        int currentTime = 0, completed = 0, totalIdleTime = 0;
        boolean[] isCompleted = new boolean[n];
        List<String> ganttChart = new ArrayList<>();

        // قائمة الأولويات (SRTF - أقل وقت متبقي)
        PriorityQueue<Process> pq = new PriorityQueue<>((a, b) -> {
            if (a.remainingTime != b.remainingTime) return a.remainingTime - b.remainingTime;
            return a.arrivalTime - b.arrivalTime;
        });

        Process lastProcess = null;
        int startTime = 0;

        while (completed < n) {
            // إضافة العمليات التي وصلت إلى قائمة الانتظار
            for (Process p : processes) {
                if (!isCompleted[p.id - 1] && p.arrivalTime <= currentTime && !pq.contains(p)) {
                    pq.add(p);
                }
            }

            if (pq.isEmpty()) {
                // تسجيل وقت الخمول (Idle Time) فقط إذا كان المعالج خاملاً
                if (lastProcess != null) {
                    ganttChart.add(startTime + "-" + currentTime + " P" + lastProcess.id);
                }
                ganttChart.add(currentTime + "-" + (currentTime + 1) + " IDLE");
                totalIdleTime++;
                currentTime++;
                lastProcess = null;
                startTime = currentTime;
                continue;
            }

            Process currentProcess = pq.poll();

            // إضافة التبديل السياقي (Context Switch) فقط إذا تغيرت العملية
            if (lastProcess != null && lastProcess.id != currentProcess.id) {
                ganttChart.add(startTime + "-" + currentTime + " P" + lastProcess.id);
                ganttChart.add(currentTime + "-" + (currentTime + 1) + " CS");
                currentTime++;
                startTime = currentTime;
            }

            // تنفيذ العملية
            currentProcess.remainingTime--;
            currentTime++;

            if (currentProcess.remainingTime == 0) {
                currentProcess.completionTime = currentTime;
                isCompleted[currentProcess.id - 1] = true;
                completed++;
            } else {
                pq.add(currentProcess);
            }

            lastProcess = currentProcess;
        }

        // إضافة آخر عملية إذا لم تتم إضافتها بعد
        if (lastProcess != null) {
            ganttChart.add(startTime + "-" + currentTime + " P" + lastProcess.id);
        }

        // حساب وإظهار النتائج
        printResults(processes, ganttChart, totalIdleTime, currentTime);
    }

    public static void printResults(List<Process> processes, List<String> ganttChart, int totalIdleTime, int totalTime) {
        double totalTAT = 0, totalWT = 0;

        System.out.println("\nExecution Timeline (Gantt Chart):");
        for (String entry : ganttChart) {
            System.out.println(entry);
        }

        System.out.println("\nPerformance Metrics:");
        for (Process p : processes) {
            p.turnaroundTime = p.completionTime - p.arrivalTime;
            p.waitingTime = p.turnaroundTime - p.burstTime;
            totalTAT += p.turnaroundTime;
            totalWT += p.waitingTime;
        }

        double avgTAT = totalTAT / processes.size();
        double avgWT = totalWT / processes.size();
        double executionTime = totalTime - totalIdleTime;
        double cpuUtilization = (executionTime / (double) totalTime) * 100.0;

        System.out.printf("Average Turnaround Time: %.2f\n", avgTAT);
        System.out.printf("Average Waiting Time: %.2f\n", avgWT);
        System.out.printf("CPU Utilization: %.2f%%\n", cpuUtilization);
    }
}
